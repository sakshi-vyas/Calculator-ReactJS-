{"version":3,"sources":["App.js","components/Solution.js","components/Buttons.js","logo.svg","serviceWorker.js","index.js"],"names":["App","onClick","button","calculate","reset","backspace","negate","setState","ans","state","checkAns","includes","result","replace","eval","e","slice","className","this","Component","Solution","props","Buttons","name","target","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6f810a3.chunk.js","sourcesContent":["import React ,  {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Solution from './components/Solution'\nimport Buttons from './components/Buttons'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state ={\n      ans:''\n    }\n  }\n  onClick = button =>\n   {\n    if(button === '='){\n      this.calculate()\n    }\n    else if(button ===\"AC\")\n{this.reset()}\nelse if(button===\"C\"){\n  this.backspace()\n}\nelse if(button ===\"+/-\")\n{this.negate()}\nelse {\n  this.setState({\n    ans : this.state.ans + button\n  })\n}\n }//onClick\n\n calculate = ()=>{\n   var checkAns = ''\n   if(this.state.ans.includes('--')){\n     checkAns = this.state.result.replace('--','+')\n   }\n   else{\n     checkAns = this.state.ans\n   }\n   try{\n     this.setState({\n       ans : (eval(checkAns) || '')+\"\"\n     })\n   }catch(e){\n     this.setState({\n       ans:'ERR'\n     })\n   }\n }//calculate\n\n reset = ()=>{\nthis.setState({\n  ans : \"\"\n})\n }//reset\n backspace = () => {\n   this.setState({\n     ans: this.state.ans.slice(0 , -1)\n   })\n }//backspace\n negate =()=>{\n   this.state ={\n    ans :  this.state.ans * (-1)\n   }\n }\n\n render(){\n   return(\n     <div >\n     \n     <div className=\"calc\">\n     <Solution ans={this.state.ans}/>\n     <Buttons onClick={this.onClick}/>\n     </div>\n     </div>\n   )\n }\n}//Class\nexport default App\n","import React ,{ Component} from 'react'\r\nclass Solution extends Component{\r\n    render()\r\n    {\r\n        let {ans} = this.props;\r\n        return(\r\n            <div className=\"ans\" >\r\n                <p>{ans} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Solution","import React , { Component} from 'react'\r\nclass Buttons extends Component{\r\n    render(){\r\n        return(\r\n<div className=\"content\">\r\n   \r\n    <button name=\"AC\" onClick={e => this.props.onClick(e.target.name)}>AC</button>\r\n    <button name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</button>\r\n    <button name=\"+/-\" className=\"operator\" onClick={e => this.props.onClick(e.target.name)}>+/-</button>\r\n    <button name=\"/\" className=\"operator\" onClick={e => this.props.onClick(e.target.name)}>/</button><br/>\r\n<button name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</button>\r\n    <button name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</button>\r\n    <button name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</button>\r\n    <button name=\"*\" className=\"operator\" onClick={e => this.props.onClick(e.target.name)}>*</button><br/>\r\n\r\n    <button name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</button>\r\n    <button name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</button>\r\n    <button name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</button>\r\n    <button name=\"-\" className=\"operator\" onClick={e => this.props.onClick(e.target.name)}>-</button><br/>\r\n\r\n    <button name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</button>\r\n    <button name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</button>\r\n    <button name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</button>\r\n    <button name=\"+\" className=\"operator\" onClick={e => this.props.onClick(e.target.name)}>+</button><br/>\r\n\r\n    <button name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</button>\r\n    <button name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</button>\r\n    <button name=\"%\" className=\"operator\" onClick={e => this.props.onClick(e.target.name)}>%</button>\r\n    \r\n    <button name=\"=\"className=\"operator\"  onClick={e => this.props.onClick(e.target.name)}>=</button>\r\n    \r\n\r\n</div>\r\n        )\r\n    }\r\n}\r\nexport default Buttons","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}